<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bound_clock=instance_nearest(x,y,objClock); //try to bind to the nearest clock

slider_min=0; //how fast?
slider_max=2; //how slow?

vertical=false;
knob_size=16;
dragging=0;
delta_x=0;

//auto-fit to room(stay on the bottom)
draw_x=8;
draw_yscale=16;

draw_y=display_get_gui_height()-8-draw_yscale;
draw_xscale=display_get_gui_width()-16; //room width and room height are the size of GUI

slider_in=draw_xscale/2; //for min 0 and max 4, this will place it at 60 ERS
slider_out=lerp(slider_min,slider_max,1-(slider_in/draw_xscale));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dragging==1)
{
var slider_in_previous=slider_in;
slider_in=clamp(device_mouse_x_to_gui(0)-draw_x,0,draw_xscale);
    
//did we move the slider?
if (slider_in_previous!=slider_in)
{
slider_out=lerp(slider_min,slider_max,1-(slider_in/draw_xscale));
//slider_out=slider_min+(slider_in/image_xscale)*(slider_max-slider_min);

bound_clock.slowmo_magnitude=slider_out; //value between min and max  
recalculateUpdateRate(bound_clock);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dragging=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//first, check if this is the right GUI area
if (device_mouse_y_to_gui(0)&gt;=view_hport[0]-knob_size)
{
mouse_clear(mb_left);
if (dragging==0)
    {
    delta_x=device_mouse_x_to_gui(0)-draw_x+knob_size/2;
    dragging=1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_dkgray);
draw_line(draw_x,draw_y+draw_yscale/2,draw_x+draw_xscale,draw_y+draw_yscale/2);

draw_set_color(c_white);
draw_line(draw_x,1+draw_y+draw_yscale/2,draw_x+draw_xscale,1+draw_y+draw_yscale/2);

draw_set_color(c_ltgray);
draw_button(draw_x+slider_in-knob_size/2,draw_y,draw_x+slider_in+knob_size/2,draw_y+draw_yscale,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
